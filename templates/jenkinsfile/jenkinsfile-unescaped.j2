#!/usr/bin/groovy
node('') {

    env.APP_NAME = "{{ APP_NAME }}"
    env.OCP_API_SERVER = "${env.OPENSHIFT_API_URL}"
    env.OCP_TOKEN = readFile('/var/run/secrets/kubernetes.io/serviceaccount/token').trim()
}

node('{{ BUILD_SLAVE_IMAGE }}') {

    stage('SCM Checkout') {
        checkout([
                $class: 'GitSCM', branches: [[name: '*/master']],
                userRemoteConfigs: [[url: '{{ GIT_SOURCE_REPO }}', credentialsId: '{{ JENKINS_CREDENTIAL }}']]
        ])
    }

    dir("${env.SOURCE_CONTEXT_DIR}") {
        stage('Build App') {
            sh "mvn clean deploy -D hsql"
        }

        // assumes uber jar is created
        stage('Build Image') {
            sh "oc start-build ${env.APP_NAME} --from-dir=target --follow"
        }
    }
}

        {% for PROJECT in PROJECTS %}
stage('{{ PROJECT }}') {
    input "Promote Application to {{ PROJECT }}?"

    openshiftTag(apiURL: "${env.OCP_API_SERVER}", authToken: "${env.OCP_TOKEN}", destStream: ${env.APP_NAME}, destTag: 'latest', destinationAuthToken: "${env.OCP_TOKEN}", destinationNamespace: "{{ PROJECT }}", namespace: "{{ PIPELINE_PROJECT }}", srcStream: "${env.APP_NAME}", srcTag: 'latest')

    openshiftVerifyDeployment(apiURL: "${env.OCP_API_SERVER}", authToken: "${env.OCP_TOKEN}", depCfg: ${env.APP_NAME}, namespace: "{{ PROJECT }}", verifyReplicaCount: true)
}
        {% endfor %}