#!\/usr\/bin\/groovy\r\nnode('') {\r\n\r\n    env.APP_NAME = \"{{ APP_NAME }}\"\r\n    env.OCP_API_SERVER = \"${env.OPENSHIFT_API_URL}\"\r\n    env.OCP_TOKEN = readFile('\/var\/run\/secrets\/kubernetes.io\/serviceaccount\/token').trim()\r\n}\r\n\r\nnode('{{ BUILD_SLAVE_IMAGE }}') {\r\n\r\n    stage('SCM Checkout') {\r\n        checkout([\r\n                $class: 'GitSCM', branches: [[name: '*\/master']],\r\n                userRemoteConfigs: [[url: '{{ GIT_SOURCE_REPO }}', credentialsId: '{{ JENKINS_CREDENTIAL }}']]\r\n        ])\r\n    }\r\n\r\n    dir(\"${env.SOURCE_CONTEXT_DIR}\") {\r\n        stage('Build App') {\r\n            sh \"mvn clean deploy -D hsql\"\r\n        }\r\n\r\n        \/\/ assumes uber jar is created\r\n        stage('Build Image') {\r\n            sh \"oc start-build ${env.APP_NAME} --from-dir=target --follow\"\r\n        }\r\n    }\r\n}\r\n\r\n        {% for PROJECT in PROJECTS %}\r\nstage('{{ PROJECT }}') {\r\n    input \"Promote Application to {{ PROJECT }}?\"\r\n\r\n    openshiftTag(apiURL: \"${env.OCP_API_SERVER}\", authToken: \"${env.OCP_TOKEN}\", destStream: ${env.APP_NAME}, destTag: 'latest', destinationAuthToken: \"${env.OCP_TOKEN}\", destinationNamespace: \"{{ PROJECT }}\", namespace: \"{{ PIPELINE_PROJECT }}\", srcStream: \"${env.APP_NAME}\", srcTag: 'latest')\r\n\r\n    openshiftVerifyDeployment(apiURL: \"${env.OCP_API_SERVER}\", authToken: \"${env.OCP_TOKEN}\", depCfg: ${env.APP_NAME}, namespace: \"{{ PROJECT }}\", verifyReplicaCount: true)\r\n}\r\n        {% endfor %}